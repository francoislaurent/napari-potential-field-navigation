"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

import magicgui.widgets as widgets
import napari.utils.notifications as notifications
from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget
from skimage.util import img_as_float

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container` napari.Viewer
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class IoContainer(Container):
    """Contains all informations about the input datas"""

    def __init__(self, viewer: "napari.viewer.Viewer") -> None:
        super().__init__()
        self._viewer = viewer
        # Image
        self._image_reader = widgets.FileEdit(label="Image path")
        self._image_reader.changed.connect(self._read_image)

        # Label
        self._label_reader = widgets.FileEdit(label="Label path")
        self._label_reader.changed.connect(self._read_label)

        self._crop_checkbox = widgets.CheckBox(
            text="Crop image",
            tooltip="Crop the image and the labels to a bounding box containing all labels > 0. Helps reduce the computation time.",
        )
        self._crop_checkbox.changed.connect(self._crop_image)
        self._lock_checkbox = widgets.CheckBox(text="Lock")
        self._lock_checkbox.changed.connect(self._lock)

        self._checkbox_container = widgets.Container(
            widgets=[self._crop_checkbox, self._lock_checkbox],
            layout="horizontal",
        )
        self.extend(
            [
                widgets.Label(label="Data selection"),
                self._image_reader,
                self._label_reader,
                self._checkbox_container,
            ]
        )

    def _read_image(self):
        if "Image" in self._viewer.layers:
            self._viewer.layers.remove("Image")
        self._viewer.open(
            self._image_reader.value,
            plugin="napari-itk-io",
            layer_type="image",
            name="Image",
        )

        # Update of the layer stack
        self._crop_checkbox.value = False
        if "Label" in self._viewer.layers:
            idx = self._viewer.layers.index("Label")
            self._viewer.layers.move(idx, -1)

    def _read_label(self):
        if "Label" in self._viewer.layers:
            self._viewer.layers.remove("Label")
        labels = self._viewer.open(
            self._label_reader.value,
            plugin="napari-itk-io",
            layer_type="image",
            name="Label_temp",
            visible=False,
        )
        for label in labels:
            data = label.data.astype(int)
            self._viewer.add_labels(
                data,
                scale=label.scale,
                metadata=label.metadata,
                translate=label.translate,
                name="Label",
                visible=True,
            )
            self._viewer.layers.remove(label)

        self._viewer.layers["Label"].editable = False
        # Update of the layer stack
        self._crop_checkbox.value = False

    def _crop_image(self):
        self._data_dict = {}

    def _lock(self):
        notifications.show_info(
            "The image locking procedure is not yet available."
        )
        raise NotImplementedError


class PointContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._source_selection = widgets.PushButton(text="Select goal")
        self._source_selection.changed.connect(self._select_source)

        self._positions_selection = widgets.PushButton(text="Select positions")
        self._positions_selection.changed.connect(self._select_positions)

        self._selection_container = widgets.Container(
            widgets=[self._source_selection, self._positions_selection],
            layout="horizontal",
        )
        self._agent_count = widgets.SpinBox(
            label="Number of agents", min=1, max=100, value=1
        )

        self.extend(
            [
                widgets.Label(label="Point cloud selection"),
                self._selection_container,
                self._agent_count,
            ]
        )

    def _select_source(self):
        print("Select source")
        raise NotImplementedError

    def _select_positions(self):
        print("Select positions")
        raise NotImplementedError

    @property
    def nb_agents(self) -> int:
        return self._agent_count.value


class ApfContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__(layout="horizontal")
        self._viewer = viewer
        self._attractive_weight_slider = widgets.FloatSlider(
            min=1,
            max=1000,
            step=1,
            value=1,
            label="Attractive weight (unit)",
        )
        self._attractive_weight_slider.changed.connect(self._update_apf)
        self._repulsive_weight_slider = widgets.FloatSlider(
            min=1,
            max=1000,
            step=1,
            value=1,
            label="Repulsive weight (unit)",
        )
        self._repulsive_weight_slider.changed.connect(self._update_apf)
        self._repulsive_radius_slider = widgets.FloatSlider(
            min=0.1, max=100, value=1, label="Repulsive radius (cm)"
        )
        self._repulsive_radius_slider.changed.connect(self._update_radius)
        self._weight_container = widgets.Container(
            widgets=[
                widgets.Label(label="APF parameters"),
                self._attractive_weight_slider,
                self._repulsive_weight_slider,
                self._repulsive_radius_slider,
            ],
            layout="vertical",
        )
        self._show_apf_box = widgets.CheckBox(text="Show APF")
        self._show_apf_box.changed.connect(self._show_apf)

        self.extend(
            [
                self._weight_container,
                self._show_apf_box,
            ]
        )

    def _update_radius(self):
        raise NotImplementedError

    def _update_apf(self):
        raise NotImplementedError

    def _show_apf(self):
        raise NotImplementedError


class SimulationContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._time_slider = widgets.FloatLogSlider(
            min=0.1,
            max=1000,
            value=10,
            base=10,
            label="Simulation final time (s)",
        )
        self._timestep_slider = widgets.FloatSlider(
            min=0.01,
            max=1,
            value=1,
            step=0.01,
            label="Simulation time step (s)",
        )
        self._speed_slider = widgets.FloatSlider(
            min=0.1,
            max=10,
            value=1,
            step=0.1,
            label="Maximal speed (cm/s)",
        )
        self._start_button = widgets.PushButton(text="Start simulation")
        self._start_button.changed.connect(self._start_simulation)

        self._sliders_container = widgets.Container(
            widgets=[
                widgets.Label(label="Simulation parameters"),
                self._time_slider,
                self._timestep_slider,
                self._speed_slider,
            ],
        )
        self._sliders_container.changed.connect(self._update_simulation)
        self._simulation_container = widgets.Container(
            widgets=[self._sliders_container, self._start_button],
            layout="horizontal",
        )
        ## Optimization widgets
        self._nb_epochs_box = widgets.SpinBox(
            label="Epochs", min=1, max=1000, step=10, value=100
        )
        self._lr_slider = widgets.FloatSpinBox(
            min=0.001, max=10, value=0.1, label="Learning rate"
        )
        self._run_optimization_button = widgets.PushButton(
            text="Run optimization"
        )
        self._run_optimization_button.changed.connect(self._run_optimization)
        self._optimization_container = Container(
            widgets=[
                widgets.Container(
                    widgets=[
                        widgets.Label(label="Optimization parameters"),
                        self._nb_epochs_box,
                        self._lr_slider,
                    ]
                ),
                self._run_optimization_button,
            ],
            layout="horizontal",
        )
        self.extend(
            [
                self._simulation_container,
                self._optimization_container,
            ]
        )

    def _update_simulation(self):
        print("New values to the simulation !")
        raise NotImplementedError

    def _start_simulation(self):
        raise NotImplementedError

    def _run_optimization(self):
        raise NotImplementedError


class DiffApfWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._io_container = IoContainer(self._viewer)
        self._point_container = PointContainer(self._viewer)
        self._apf_container = ApfContainer(self._viewer)
        self._simulation_container = SimulationContainer(self._viewer)
        self.extend(
            [
                self._io_container,
                self._point_container,
                self._apf_container,
                self._simulation_container,
            ]
        )

    @property
    def io_container(self) -> IoContainer:
        return self._io_container

    @property
    def point_container(self) -> PointContainer:
        return self._point_container


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
