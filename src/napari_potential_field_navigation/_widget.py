"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

import magicgui.widgets as widgets
import napari.utils.notifications as notifications
import numpy as np
import scipy.ndimage as ndi
from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget
from skimage.util import img_as_float
import scipy.ndimage as ndi

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container` napari.Viewer
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class IoContainer(Container):
    """Contains all informations about the input datas"""

    def __init__(self, viewer: "napari.viewer.Viewer") -> None:
        super().__init__()
        self._viewer = viewer
        # Image
        self._image_reader = widgets.FileEdit(label="Image path")
        self._image_reader.changed.connect(self._read_image)

        # Label
        self._label_reader = widgets.FileEdit(label="Label path")
        self._label_reader.changed.connect(self._read_label)

        self._crop_checkbox = widgets.PushButton(
            text="Crop image",
            tooltip="Crop the image and the labels to a bounding box containing all labels > 0. Helps reduce the computation time.",
        )
        self._crop_checkbox.changed.connect(self._crop_image)
        self._lock_checkbox = widgets.CheckBox(text="Lock")
        self._lock_checkbox.changed.connect(self._lock)

        self._checkbox_container = widgets.Container(
            widgets=[self._crop_checkbox, self._lock_checkbox],
            layout="horizontal",
        )
        self.extend(
            [
                widgets.Label(label="Data selection"),
                self._image_reader,
                self._label_reader,
                self._checkbox_container,
            ]
        )

    def _read_image(self):
        if "Image" in self._viewer.layers:
            self._viewer.layers.remove("Image")
        self._viewer.open(
            self._image_reader.value,
            plugin="napari-itk-io",
            layer_type="image",
            name="Image",
        )

        # Update of the layer stack
        if "Label" in self._viewer.layers:
            idx = self._viewer.layers.index("Label")
            self._viewer.layers.move(idx, -1)

    def _read_label(self):
        if "Label" in self._viewer.layers:
            self._viewer.layers.remove("Label")
        labels = self._viewer.open(
            self._label_reader.value,
            plugin="napari-itk-io",
            layer_type="image",
            name="Label_temp",
            visible=False,
        )
        for label in labels:
            data = label.data.astype(int)
            self._viewer.add_labels(
                data,
                scale=label.scale,
                metadata=label.metadata,
                translate=label.translate,
                name="Label",
                blending="additive",
                visible=True,
            )
            self._viewer.layers.remove(label)

        self._viewer.layers["Label"].editable = False

    def _crop_image(self) -> None:
        if "Label" not in self._viewer.layers:
            notifications.show_error(
                "No label found. Please select a label file before croping the image."
            )
            return
        slices = ndi.find_objects(self._viewer.layers["Label"].data)
        # Take into account the shift of origin
        starting_index = [slide.start for slide in slices[0]]
        new_origin = np.array(
            self._viewer.layers["Label"].data_to_world(starting_index)
        )

        self._viewer.layers["Label"].data = self._viewer.layers["Label"].data[
            slices[0]
        ]
        self._viewer.layers["Label"].translate = new_origin
        if "Image" in self._viewer.layers:
            self._viewer.layers["Image"].data = self._viewer.layers[
                "Image"
            ].data[slices[0]]
            self._viewer.layers["Image"].translate = new_origin

    def _lock(self):
        notifications.show_info(
            "The image locking procedure is not yet available."
        )
        raise NotImplementedError


class PointContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__(layout="horizontal")
        self._viewer = viewer
        self._source_selection = widgets.PushButton(text="Select goal")
        self._source_selection.changed.connect(self._select_source)

        self._positions_selection = widgets.PushButton(text="Select positions")
        self._positions_selection.changed.connect(self._select_positions)

        self._goal_layer = None
        self._position_layer = None

        self.extend(
            [
                widgets.Label(label="Point cloud selection"),
                self._source_selection,
                self._positions_selection,
            ]
        )

    def _select_source(self):
        if "Goal" not in self._viewer.layers:
            self._goal_layer = self._viewer.add_points(
                name="Goal",
                edge_color="lime",
                face_color="transparent",
                symbol="disc",
                ndim=3,
            )
            self._goal_layer.mouse_drag_callbacks.append(self._on_add_point)
        if self._source_selection.text == "Edit goal":
            self._goal_layer.data = np.array([])
            self._goal_layer.editable = True

        print("Select source")
        self._viewer.layers.selection = [self._goal_layer]
        self._goal_layer.mode = "add"

    def _select_positions(self):
        if "Initial positions" not in self._viewer.layers:
            self._position_layer = self._viewer.add_points(
                name="Initial positions",
                edge_color="#0055ffff",
                face_color="transparent",
                symbol="disc",
                ndim=3,
            )

        print("Select positions")
        self._viewer.layers.selection = [self._position_layer]
        self._position_layer.mode = "add"

    def _on_add_point(self, layer, event):
        if layer.mode == "add" and layer.editable:
            layer.add(event.position)
            layer.editable = False
            self._source_selection.text = "Edit goal"


class ApfContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._source_selection = widgets.PushButton(text="Select goal")
        self._source_selection.changed.connect(self._select_source)

        self._positions_selection = widgets.PushButton(text="Select positions")
        self._positions_selection.changed.connect(self._select_positions)

        self._goal_layer = None
        self._position_layer = None

        point_cloud_container = widgets.Container(
            widgets=[
                widgets.Label(label="Point cloud selection"),
                self._source_selection,
                self._positions_selection,
            ],
            layout="horizontal",
        )

        self._attractive_weight_slider = widgets.FloatSlider(
            min=1,
            max=1000,
            step=1,
            value=1,
            label="Attractive weight (unit)",
        )
        self._attractive_weight_slider.changed.connect(self._update_apf)
        self._repulsive_weight_slider = widgets.FloatSlider(
            min=1,
            max=1000,
            step=1,
            value=1,
            label="Repulsive weight (unit)",
        )
        self._repulsive_weight_slider.changed.connect(self._update_apf)
        self._repulsive_radius_slider = widgets.FloatSlider(
            min=0.1, max=100, value=1, label="Repulsive radius (cm)"
        )
        self._weight_container = widgets.Container(
            widgets=[
                widgets.Label(label="APF parameters"),
                self._attractive_weight_slider,
                self._repulsive_weight_slider,
                self._repulsive_radius_slider,
            ],
            layout="vertical",
        )
        self._weight_container.changed.connect(self._update_apf)
        self._compute_apf_box = widgets.PushButton(text="Compute APF")
        self._compute_apf_box.changed.connect(self._compute_apf)

        self.extend(
            [
                point_cloud_container,
                self._weight_container,
                self._compute_apf_box,
            ]
        )

        self._attractive_field = None
        self._repulsive_field = None

    def _select_source(self):
        if "Goal" not in self._viewer.layers:
            self._goal_layer = self._viewer.add_points(
                name="Goal",
                face_color="lime",
                symbol="disc",
                ndim=3,
            )
            self._goal_layer.mouse_drag_callbacks.append(self._on_add_point)
        if self._source_selection.text == "Edit goal":
            self._goal_layer.data = np.array([])
            self._goal_layer.editable = True

        print("Select source")
        self._viewer.layers.selection = [self._goal_layer]
        self._goal_layer.mode = "add"

    def _select_positions(self):
        if "Initial positions" not in self._viewer.layers:
            self._position_layer = self._viewer.add_points(
                name="Initial positions",
                edge_color="#0055ffff",
                face_color="transparent",
                symbol="disc",
                ndim=3,
            )

        print("Select positions")
        self._viewer.layers.selection = [self._position_layer]
        self._position_layer.mode = "add"

    def _on_add_point(self, layer, event):
        if layer.mode == "add" and layer.editable:
            layer.add(event.position)
            layer.editable = False
            self._source_selection.text = "Edit goal"

    def _update_apf(self):
        if self._attractive_field is None or self._repulsive_field is None:
            notifications.show_info(
                "No exising Artificial Potential Field found. Computing the APF.."
            )
            self._compute_apf()
        repulsive_field = np.where(
            self._repulsive_field <= self._repulsive_radius_slider.value,
            self._repulsive_field,
            0,
        )
        artificial_potential_field = (
            self._attractive_weight_slider.value * self._attractive_field
            + self._repulsive_weight_slider.value * repulsive_field
        )
        self._viewer.layers["APF"].data = artificial_potential_field

    def _compute_apf(self):
        if "Label" not in self._viewer.layers:
            notifications.show_error(
                "No label found. Please select a label file before computing the APF."
            )
            return
        if "Goal" not in self._viewer.layers:
            notifications.show_error(
                "No goal found. Please select a goal before computing the APF."
            )
            return
        if "APF" in self._viewer.layers:
            self._viewer.layers.remove("APF")
            # self._viewer.layers.remove("Initial Vector Field")
        label_layer = self._viewer.layers["Label"]

        self._attractive_field = self._compute_attractive_field(
            label_layer, self.goal_position
        )
        self._attractive_field[label_layer.data == 0] = 0
        self._repulsive_field = ndi.distance_transform_edt(
            label_layer.data, sampling=label_layer.scale
        )
        repulsive_field = np.where(
            self._repulsive_field <= self._repulsive_radius_slider.value,
            self._repulsive_field,
            0,
        )
        artificial_potential_field = (
            self._attractive_weight_slider.value * self._attractive_field
            + self._repulsive_weight_slider.value * repulsive_field
        )
        self._viewer.add_image(
            artificial_potential_field,
            name="APF",
            colormap="inferno",
            blending="additive",
            scale=label_layer.scale,
            translate=label_layer.translate,
            metadata=label_layer.metadata,
            visible=True,
        )
        self._compute_apf_box.text = "Update APF"

    @staticmethod
    def _compute_attractive_field(
        label_layer: "napari.layers.Labels", goal_position: np.ndarray
    ) -> np.ndarray:
        assert goal_position.shape == (3,), "Goal position must be 3D vector"
        starting = np.array(label_layer.translate)
        spacing = np.array(label_layer.scale)
        ending = starting + spacing * label_layer.data.shape
        spacial_grid = np.mgrid[
            starting[0] : ending[0] : spacing[0],
            starting[1] : ending[1] : spacing[1],
            starting[2] : ending[2] : spacing[2],
        ]

        attractive_field = np.linalg.norm(
            np.stack(
                [
                    spacial_grid[0] - goal_position[0],
                    spacial_grid[1] - goal_position[1],
                    spacial_grid[2] - goal_position[2],
                ]
            ),
            axis=0,
        )
        return attractive_field

    @property
    def goal_position(self) -> np.ndarray:
        if self._goal_layer is None:
            raise ValueError("There is no goal layer in the viewer")
        return self._goal_layer.data[0]

    @property
    def initial_positions(self) -> np.ndarray:
        if self._position_layer is None:
            raise ValueError("No initial positions selected")
        return self._position_layer.data


class SimulationContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._time_slider = widgets.FloatSlider(
            min=0.1,
            max=1000,
            value=10,
            label="Simulation final time (s)",
        )
        self._timestep_slider = widgets.FloatSlider(
            min=0.01,
            max=1,
            value=1,
            step=0.01,
            label="Simulation time step (s)",
        )
        self._speed_slider = widgets.FloatSlider(
            min=0.1,
            max=10,
            value=1,
            step=0.1,
            label="Maximal speed (cm/s)",
        )
        self._diffusivity_slider = widgets.FloatSlider(
            min=0,
            max=10,
            value=0.1,
            step=0.1,
            label="Agent diffusivity (cm^2/s)",
        )

        self._agent_count = widgets.SpinBox(
            label="Number of agents", min=1, max=100, value=1
        )
        self._start_button = widgets.PushButton(text="Run simulation")
        self._start_button.changed.connect(self._run_simulation)

        button_container = widgets.Container(
            widgets=[
                self._agent_count,
                self._start_button,
            ],
            layout="horizontal",
        )

        self.extend(
            [
                widgets.Label(label="Simulation parameters"),
                self._time_slider,
                self._timestep_slider,
                self._speed_slider,
                self._diffusivity_slider,
                button_container,
            ]
        )

    def _run_simulation(self):
        raise NotImplementedError

    @property
    def dt(self) -> float:
        return self._timestep_slider.value

    @property
    def tmax(self) -> float:
        return self._time_slider.value

    @property
    def vmax(self) -> float:
        return self._speed_slider.value

    @property
    def nb_agents(self) -> int:
        return self._agent_count.value

    @property
    def diffusivity(self) -> float:
        return self._diffusivity_slider.value


class OptimizationContainer(Container):
    def __init__(
        self, viewer: "napari.viewer.Viewer", sim_widget: SimulationContainer
    ):
        super().__init__(layout="horizontal")
        self._viewer = viewer
        self._sim_widget = sim_widget
        ## Optimization widgets
        self._nb_epochs_box = widgets.SpinBox(
            label="Epochs", min=1, max=1000, step=10, value=100
        )
        self._lr_slider = widgets.FloatSpinBox(
            min=0.001, max=10, value=0.1, label="Learning rate"
        )

        self._run_optimization_button = widgets.PushButton(
            text="Run optimization"
        )
        self._run_optimization_button.changed.connect(self._run_optimization)
        param_container = widgets.Container(
            widgets=[
                widgets.Label(label="Optimization parameters"),
                self._nb_epochs_box,
                self._lr_slider,
            ],
        )

        self.extend(
            [
                param_container,
                self._run_optimization_button,
            ]
        )

    def _run_optimization(self):
        notifications.show_info(f"nb_agents = {self._sim_widget.nb_agents}")
        raise NotImplementedError


class DiffApfWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        self._io_container = IoContainer(self._viewer)
        self._point_container = PointContainer(self._viewer)
        self._apf_container = ApfContainer(self._viewer)
        self._simulation_container = SimulationContainer(self._viewer)
        self._optimization_container = OptimizationContainer(
            self._viewer, self._simulation_container
        )
        self.extend(
            [
                self._io_container,
                # self._point_container,
                self._apf_container,
                self._simulation_container,
                self._optimization_container,
            ]
        )


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
